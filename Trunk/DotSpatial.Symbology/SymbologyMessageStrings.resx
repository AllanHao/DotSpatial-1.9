<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DesktopRasterExt_CreatingShadedRelief" xml:space="preserve">
    <value>Creating Shaded Relief</value>
  </data>
  <data name="LayerManager_FileTypeNotSupported" xml:space="preserve">
    <value>文件类型不支持</value>
  </data>
  <data name="DesktopRasterExt_PaintingHillshade" xml:space="preserve">
    <value>Painting Hillshade To Bitmap</value>
  </data>
  <data name="LineFeatureTypeException" xml:space="preserve">
    <value>不是兼容的线数据类型</value>
  </data>
  <data name="PointFeatureTypeException" xml:space="preserve">
    <value>不是兼容的点数据类型</value>
  </data>
  <data name="PolygonFeatureTypeException" xml:space="preserve">
    <value>不是兼容的面数据类型</value>
  </data>
  <data name="DesktopRasterExt_PaintingColorScheme" xml:space="preserve">
    <value>Painting color scheme to bitmap.</value>
  </data>
  <data name="FileCantBeDeletedException_S" xml:space="preserve">
    <value>该文件 %S 不能被删除，可能被其他应用占用</value>
  </data>
  <data name="NullLogException_S" xml:space="preserve">
    <value>参数 %S 不能为空</value>
  </data>
  <data name="LayerFrame_CreateGroup" xml:space="preserve">
    <value>创建分组</value>
  </data>
  <data name="LayerFrame_Map_Layers" xml:space="preserve">
    <value>地图图层</value>
  </data>
  <data name="LayerFrame_RemoveMapFrame" xml:space="preserve">
    <value>移除地图框架</value>
  </data>
  <data name="LayerFrame_ZoomToMapFrame" xml:space="preserve">
    <value>缩放到地图框架</value>
  </data>
  <data name="RemoveLayer" xml:space="preserve">
    <value>移除图层</value>
    <comment>RemoveLayer description</comment>
  </data>
  <data name="ZoomToLayer" xml:space="preserve">
    <value>缩放到图层</value>
    <comment>ZoomToLayer description</comment>
  </data>
  <data name="SetDynamicVisibilityScale" xml:space="preserve">
    <value>设置动态可见比例尺</value>
    <comment>SetDynamicVisibilityScale description</comment>
  </data>
  <data name="ExportData" xml:space="preserve">
    <value>导出数据</value>
    <comment>ExportData description</comment>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>属性</value>
    <comment>Properties description</comment>
  </data>
  <data name="FeatureLayer_Create_Layer_From_Selected_Features" xml:space="preserve">
    <value>将选中要素加入新图层</value>
    <comment>Legend Context Menu: Create Layer from Selected Features</comment>
  </data>
  <data name="FeatureLayer_Join_Excel_File" xml:space="preserve">
    <value>Join Excel file 'Data' Label</value>
    <comment>Legend Context Menu:  Join Excel file Data Label</comment>
  </data>
  <data name="FeatureLayer_Labeling" xml:space="preserve">
    <value>标签</value>
    <comment>Legend Context Menu: Labeling</comment>
  </data>
  <data name="FeatureLayer_Label_Setup" xml:space="preserve">
    <value>标签设置</value>
    <comment>Legend Context Menu: Label Setup</comment>
  </data>
  <data name="FeatureLayer_Selection" xml:space="preserve">
    <value>选择</value>
    <comment>Legend Context Menu: Selection</comment>
  </data>
  <data name="FeatureLayer_Zoom_To_Selected" xml:space="preserve">
    <value>缩放到选中要素</value>
    <comment>Legend Context Menu:  Zoom to Selected Features</comment>
  </data>
  <data name="Layer_Properties" xml:space="preserve">
    <value>属性</value>
    <comment>Layer Properties Context Menu Item</comment>
  </data>
  <data name="FeatureLayer_UnselectAll" xml:space="preserve">
    <value>取消选中</value>
    <comment>Legend Context Menu: Selection - Unselect All</comment>
  </data>
  <data name="FeatureLayer_SelectAll" xml:space="preserve">
    <value>全部选中</value>
    <comment>Legend Context Menu: Selection - Select All</comment>
  </data>
  <data name="Data" xml:space="preserve">
    <value>数据</value>
  </data>
  <data name="Expression_OperandExpected" xml:space="preserve">
    <value>Expected operand. Found character {0} at position {1}.</value>
    <comment>Expected operand. Found character {0} at position {1}.</comment>
  </data>
  <data name="Expression_OperatorExprected" xml:space="preserve">
    <value>Expected operator. Found character {0} at position {1}.</value>
    <comment>Expected operator. Found character {0} at position {1}.</comment>
  </data>
  <data name="Expression_ClosingBracket" xml:space="preserve">
    <value>缺少括号</value>
    <comment>The closing bracket wasn't found.</comment>
  </data>
  <data name="Expression_EmptyField" xml:space="preserve">
    <value>表达式包含空字段</value>
    <comment>The expression contains empty fields.</comment>
  </data>
  <data name="Expression_FieldNotFound" xml:space="preserve">
    <value>以下字段未找到：</value>
    <comment>The following field wasn't found:</comment>
  </data>
  <data name="Expression_LeftOperandMissing" xml:space="preserve">
    <value>缺少左操作数</value>
    <comment>No left operand was found.</comment>
  </data>
  <data name="Expression_NotANumber" xml:space="preserve">
    <value>值不是数字</value>
    <comment>The value is not a number:</comment>
  </data>
  <data name="Expression_OperationNotFound" xml:space="preserve">
    <value>Failed to find operation.</value>
    <comment>Failed to find operation.</comment>
  </data>
  <data name="Expression_OperationNotSupported" xml:space="preserve">
    <value>Operation not supported.</value>
    <comment>Operation not supported.</comment>
  </data>
  <data name="Expression_OpereratorInsteadOfValue" xml:space="preserve">
    <value>There is an operator in place of a value.</value>
    <comment>There is an operator in place of a value.</comment>
  </data>
  <data name="Expression_PlusNotAllowed" xml:space="preserve">
    <value>+ operation isn't allowed for boolean values.</value>
    <comment>+ operation isn't allowed for boolean values.</comment>
  </data>
  <data name="Expression_RightOperandMissing" xml:space="preserve">
    <value>No right operand was found.</value>
    <comment>No right operand was found.</comment>
  </data>
  <data name="Expression_UnpairedBracket" xml:space="preserve">
    <value>The expression contains unpaired square brackets.</value>
    <comment>The expression contains unpaired square brackets.</comment>
  </data>
  <data name="Expression_UnpairedTextquotes" xml:space="preserve">
    <value>The expression contains unpaired text quotes.</value>
    <comment>The expression contains unpaired text quotes.</comment>
  </data>
  <data name="Expression_ZeroDivision" xml:space="preserve">
    <value>Division by zero.</value>
    <comment>Division by zero.</comment>
  </data>
  <data name="Expression_Empty" xml:space="preserve">
    <value>表达式为空</value>
    <comment>The expression is empty.</comment>
  </data>
</root>